.TH "ZSNAPPER" "1" "September 2015" "" ""
.SH NAME
.PP
zsnapper \- automatically manage ZFS snapshots
.SH SYNOSIS
.PP
zsnapper [OPTIONS]
.SH OPTIONS
.TP
.B \-c <path>
Path to configuration file (default
\f[B]/opt/local/zsnapper/etc/zsnapper.yml\f[])
.RS
.RE
.TP
.B \-v
Enable verbose output
.RS
.RE
.SH DESCRIPTION
.PP
Zsnapper automatically creates ZFS snapshots on a specified schedule,
while also removing old snapshots as required.
The behavior is specified by the \f[B]CONFIGURATION\f[].
Snapshots are grouped into \f[I]families\f[], each having a name,
containing a set of \f[I]datasets\f[], a \f[I]schedule\f[], a number of
snapshots to \f[I]keep\f[] and an option for \f[I]recursiveness\f[].
.PP
Snapshots are named according to a "family\-timestamp" convention.
For example, a snapshot belonging to the "test" family may be called
\f[B]test\-20150928T112300Z\f[].
Time stamps are always in the UTC timezone and formatted in the ISO 8601
basic format.
.SH CONFIGURATION
.PP
The following is an example of a valid snapper configuration file:
.IP
.nf
\f[C]
\-\ family:\ quick
\ \ datasets:
\ \ \ \ \-\ zones/var
\ \ \ \ \-\ data/delegated/*
\ \ schedule:\ "0\ */5\ *\ *\ *\ *"
\ \ keep:\ 12
\ \ recursive:\ false

\-\ family:\ hourly
\ \ datasets:
\ \ \ \ \-\ zones/$(vmadm\ list\ \-Ho\ uuid)*
\ \ schedule:\ "\@hourly"
\ \ keep:\ 12
\ \ recursive:\ true
\f[]
.fi
.PP
Two families are declared, \f[B]quick\f[] and \f[B]hourly\f[].
Each has a list of datasets, containing wildcards and shell expansions
\- see the \f[B]Dataset Expansions\f[] section for the meaning and
syntax of these.
The \f[B]schedule\f[] is a cron format string with a seconds field \-
see the \f[B]Schedule Format\f[] section for the meaning of the
individual fields.
.SS Dataset Expansions
.PP
The list of datasets configured per family is interpreted as a
\f[I]filter\f[] on the list of actually existing datasets at the time of
job execution.
This means that it\[aq]s valid and not an error to mention a dataset
that does not exist.
Two forms of expansions are interpreted: wildcards, and shell
invocations.
Wildcards follow the following syntax, which is essentially standard
shell glob patterns:
.IP
.nf
\f[C]
pattern:
\ \ {\ term\ }

term:
\ \ \[aq]*\[aq]\ \ \ \ \ \ \ \ \ matches\ any\ sequence\ of\ non\-/\ characters
\ \ \[aq]?\[aq]\ \ \ \ \ \ \ \ \ matches\ any\ single\ non\-/\ character
\ \ \[aq][\[aq]\ [\ \[aq]^\[aq]\ ]\ {\ character\-range\ }\ \[aq]]\[aq]
\ \ \ \ \ \ \ \ \ \ \ \ \ \ character\ class\ (must\ be\ non\-empty)
\ \ c\ \ \ \ \ \ \ \ \ \ \ matches\ character\ c\ (c\ !=\ \[aq]*\[aq],\ \[aq]?\[aq],\ \[aq]\\\\\[aq],\ \[aq][\[aq])
\ \ \[aq]\\\\\[aq]\ c\ \ \ \ \ \ matches\ character\ c

character\-range:
\ \ c\ \ \ \ \ \ \ \ \ \ \ matches\ character\ c\ (c\ !=\ \[aq]\\\\\[aq],\ \[aq]\-\[aq],\ \[aq]]\[aq])
\ \ \[aq]\\\\\[aq]\ c\ \ \ \ \ \ matches\ character\ c
\ \ lo\ \[aq]\-\[aq]\ hi\ \ \ matches\ character\ c\ for\ lo\ <=\ c\ <=\ hi
\f[]
.fi
.PP
Shell invocations take the form of \f[C]$(command)\f[], where the
command is executed using \f[C]/bin/sh\ \-c\f[].
Each line of output from the command results in one pattern being added
to the dataset list.
If multiple shell invocations are present in the same pattern, they are
expanded and all combinations are added.
As an example, consider the pattern:
.IP
.nf
\f[C]
a\-$(echo\ f1;\ echo\ f2)\-b\-$(echo\ f3;\ echo\ f4;)\-*
\f[]
.fi
.PP
The shell invocations are expanded, resulting the following list of
patterns:
.IP
.nf
\f[C]
a\-f1\-b\-f3\-*
a\-f1\-b\-f4\-*
a\-f2\-b\-f3\-*
a\-f2\-b\-f4\-*
\f[]
.fi
.PP
This list of patterns is then compared against the list of existing
datasets to form the list of datasets to snapshot.
For a concrete use case, consider the pattern:
.RS
.PP
zones/$(vmadm list \-Ho uuid)*
.RE
.PP
On SmartOS, the shell invocation expands into a list of virtual machine
IDs.
The result is a list of dataset patterns that match virtual machine
zones, and virtual machine disk volumes, but not template images as
these are not returned by the \f[C]vmadm\ list\f[] command.
.SS Schedule Format
.PP
> This section is copied from
<https://github.com/robfig/cron/blob/master/doc.go>, formatted for this
man page.
.PP
A cron expression represents a set of times, using 6 space\-separated
fields:
.IP
.nf
\f[C]
Field\ name\ \ \ |\ Allowed\ values\ \ |\ Allowed\ special\ characters
\-\-\-\-\-\-\-\-\-\-\ \ \ |\ \-\-\-\-\-\-\-\-\-\-\-\-\-\-\ \ |\ \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
Seconds\ \ \ \ \ \ |\ 0\-59\ \ \ \ \ \ \ \ \ \ \ \ |\ *\ /\ ,\ \-
Minutes\ \ \ \ \ \ |\ 0\-59\ \ \ \ \ \ \ \ \ \ \ \ |\ *\ /\ ,\ \-
Hours\ \ \ \ \ \ \ \ |\ 0\-23\ \ \ \ \ \ \ \ \ \ \ \ |\ *\ /\ ,\ \-
Day\ of\ month\ |\ 1\-31\ \ \ \ \ \ \ \ \ \ \ \ |\ *\ /\ ,\ \-\ ?
Month\ \ \ \ \ \ \ \ |\ 1\-12\ or\ JAN\-DEC\ |\ *\ /\ ,\ \-
Day\ of\ week\ \ |\ 0\-6\ or\ SUN\-SAT\ \ |\ *\ /\ ,\ \-\ ?
\f[]
.fi
.PP
Note: Month and Day\-of\-week field values are case insensitive.
"SUN", "Sun", and "sun" are equally accepted.
.SS Special Characters
.TP
.B Asterisk (\f[C]*\f[])
The asterisk indicates that the cron expression will match for all
values of the field; e.g., using an asterisk in the 5th field (month)
would indicate every month.
.RS
.RE
.TP
.B Slash (\f[C]/\f[])
Slashes are used to describe increments of ranges.
For example 3\-59/15 in the 1st field (minutes) would indicate the 3rd
minute of the hour and every 15 minutes thereafter.
The form "*/..." is equivalent to the form "first\-last/...", that is,
an increment over the largest possible range of the field.
The form "N/..." is accepted as meaning "N\-MAX/...", that is, starting
at N, use the increment until the end of that specific range.
It does not wrap around.
.RS
.RE
.TP
.B Comma (\f[C],\f[])
Commas are used to separate items of a list.
For example, using "MON,WED,FRI" in the 5th field (day of week) would
mean Mondays, Wednesdays and Fridays.
.RS
.RE
.TP
.B Hyphen (\f[C]\-\f[])
Hyphens are used to define ranges.
For example, 9\-17 would indicate every hour between 9am and 5pm
inclusive.
.RS
.RE
.TP
.B Question mark (\f[C]?\f[])
Question mark may be used instead of \[aq]*\[aq] for leaving either
day\-of\-month or day\-of\-week blank.
.RS
.RE
.SS Predefined schedules
.PP
You may use one of several pre\-defined schedules in place of a cron
expression:
.TP
.B \@yearly (or \@annually)
Run once a year, midnight, Jan.
1st (\f[C]0\ 0\ 0\ 1\ 1\ *\f[])
.RS
.RE
.TP
.B \@monthly
Run once a month, midnight, first of month (\f[C]0\ 0\ 0\ 1\ *\ *\f[])
.RS
.RE
.TP
.B \@weekly
Run once a week, midnight on Sunday (\f[C]0\ 0\ 0\ *\ *\ 0\f[])
.RS
.RE
.TP
.B \@daily (or \@midnight)
Run once a day, midnight (\f[C]0\ 0\ 0\ *\ *\ *\f[])
.RS
.RE
.TP
.B \@hourly
Run once an hour, beginning of hour (\f[C]0\ 0\ *\ *\ *\ *\f[])
.RS
.RE
.SS Intervals
.PP
You may also schedule a job to execute at fixed intervals.
This is supported by formatting the cron spec like this:
.IP
.nf
\f[C]
\@every\ <duration>
\f[]
.fi
.PP
where "duration" is a string accepted by time.ParseDuration
(<http://golang.org/pkg/time/#ParseDuration>).
.PP
For example, \f[C]"\@every\ 1h30m10s"\f[] would indicate a schedule that
activates every 1 hour, 30 minutes, 10 seconds.
.PP
Note: The interval does not take the job runtime into account.
For example, if a job takes 3 minutes to run, and it is scheduled to run
every 5 minutes, it will have only 2 minutes of idle time between each
run.
.SS Time zones
.PP
All interpretation and scheduling is done in the machine\[aq]s local
time zone (as provided by the Go time package
(<http://www.golang.org/pkg/time>).
.PP
Be aware that jobs scheduled during daylight\-savings leap\-ahead
transitions will not be run!
.SH AUTHORS
Jakob Borg.
